{{ $scope := .pkg }}
{{ $struct := .struct }}

{{ $struct.Comment }}
type {{ $struct.Name }} struct {
{{- range $param := $struct.TypeParameters }}
  {{ .Name }} {{ goType $scope .Type }}
{{- end }}
{{- range $field := $struct.Fields }}
  {{- template "field_declaration.go.tmpl" dict "pkg" $scope "field" $field }}
{{- end }}
}

func (v *{{ $struct.Name}}) Clone() zserio.ZserioType {
  clone := &{{ $struct.Name }}{}
  *clone = *v
  return clone
}

func (v *{{ $struct.Name}}) LoadDefaultValues() error {
{{- range $field := $struct.Fields }}
{{template "default_values.go.tmpl" dict "pkg" $scope "field" $field }}
{{- end}}
  return nil
}

// MarshalZserio implements the zserio.Marshaler interface.
func (v *{{ $struct.Name}}) MarshalZserio(w zserio.Writer) error {
{{- if $struct.Fields }}
    var err error
{{- range $field := $struct.Fields }}
{{template "encode.go.tmpl" dict "pkg" $scope "field" $field }}
{{- end }}
    _ = err // to avoid "declared but not used" warning
{{- end }}
    return nil
}

// UnmarshalZserio implements the zserio.Unmarshaler interface.
func (v *{{ $struct.Name}}) UnmarshalZserio(r zserio.Reader) error {
{{- if $struct.Fields }}
    var err error
{{- range $field := $struct.Fields }}
{{template "decode.go.tmpl" dict "pkg" $scope "field" $field }}
{{- end}}
    _ = err // to avoid "declared but not used" warning
{{- end }}
    return nil
}

{{template "functions.go.tmpl" dict "name" $struct.Name "scope" $scope "functions" $struct.Functions }}

// ZserioBitSize implements the zserio.Marshaler interface.
func (v *{{ $struct.Name}}) ZserioBitSize(bitPosition int) (int, error) {
  endBitPosition := bitPosition
{{- range $index, $field := $struct.Fields }}
    {{- template "bitsizeof.go.tmpl" dict "pkg" $scope "field" $field "index" $index }}
{{- end }}
  return endBitPosition - bitPosition, nil
}


func (v *{{ $struct.Name}}) ZserioCreatePackingContext(contextNode *zserio.PackingContextNode) error {
{{- range $field := $struct.Fields }}
  {{- template "packing_context_create.go.tmpl" dict "pkg" $scope "field" $field }}
{{- end}}
  return nil
}

func (v *{{ $struct.Name}}) ZserioInitPackingContext(contextNode *zserio.PackingContextNode) error {
    childrenNodes := contextNode.GetChildren()
    _ = childrenNodes // to avoid "declared but not used" warning
{{- range $index, $field := $struct.Fields }}
  {{- template "packing_context_init.go.tmpl" dict "pkg" $scope "field" $field "index" $index }}
{{- end}}
  return nil
}


func (v *{{ $struct.Name}}) UnmarshalZserioPacked(contextNode *zserio.PackingContextNode, r zserio.Reader) error {
{{- if $struct.Fields }}
    var err error
    childrenNodes := contextNode.GetChildren()
    _ = childrenNodes // to avoid "declared but not used" warning
{{- range $index, $field := $struct.Fields }}
{{template "packing_context_decode.go.tmpl" dict "pkg" $scope "field" $field "index" $index }}
{{- end}}
    _ = err // to avoid "declared but not used" warning
{{- end }}
    return nil
}


func (v *{{ $struct.Name}}) MarshalZserioPacked(contextNode *zserio.PackingContextNode, w zserio.Writer) error {
{{- if $struct.Fields }}
    var err error
    childrenNodes := contextNode.GetChildren()
    _ = childrenNodes // to avoid "declared but not used" warning
{{- range $index, $field := $struct.Fields }}
{{template "packing_context_encode.go.tmpl" dict "pkg" $scope "field" $field "index" $index }}
{{- end }}
    _ = err // to avoid "declared but not used" warning
{{- end }}
    return nil
}

func (v *{{ $struct.Name}}) ZserioInitializeOffsetsPacked(contextNode *zserio.PackingContextNode, bitPosition int) int {
  return 0
}

func (v *{{ $struct.Name}}) ZserioBitSizePacked(contextNode *zserio.PackingContextNode, bitPosition int) (int, error) {
  endBitPosition := bitPosition
{{- if $struct.Fields }}
  childrenNodes := contextNode.GetChildren()
  _ = childrenNodes // to avoid "declared but not used" warning
{{- range $index, $field := $struct.Fields }}
  {{- template "packing_context_bitsize.go.tmpl" dict "pkg" $scope "field" $field "index" $index }}
{{- end}}
{{- end }}
  return endBitPosition - bitPosition, nil
}
