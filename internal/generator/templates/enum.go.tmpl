{{ template "preamble.go.tmpl" dict "rootPackage" .rootPackage "pkg" .pkg }}
{{ $scope := .pkg }} 
{{ $enum := .enum }}

{{ $enum.Comment }}
type {{ $enum.Name }} {{ goType $scope $enum.Type }}
const (
{{- range $item := $enum.Items }}
    {{- if $item.Comment}}
        {{ $item.Comment }}
    {{- end}}
    {{ $item.Name }} {{ $enum.Name }} = {{ if eq $item.ResultType "int" }}{{ .ResultIntValue }}
    {{- else if eq $item.ResultType "string" }}{{ .ResultStringValue }}
    {{- else }}UNSUPPORTED
    {{- end }}
{{- end }}
)

// MarshalZserio implements the zserio.Marshaler interface.
func (v *{{ $enum.Name}}) MarshalZserio(w *bitio.Writer, packed bool) error {
    {{- if not $enum.Type.IsBuiltin }}
      panic("only builtin types supported")
    {{- else if eq $enum.Type.Bits 0 }}
      return ztype.Write{{ title $enum.Type.Name }}(w, v)
    {{- else if eq $enum.Type.Name "bit" }}
      return ztype.WriteUnsignedBits(w, uint64(*v), {{ $enum.Type.Bits }})
    {{- else if eq $enum.Type.Name "int" }}
      return ztype.WriteSignedBits(w, int64(*v), {{ $enum.Type.Bits }})
    {{- else }}
      panic("unsupported type")
    {{- end }}
}

// UnmarshalZserio implements the zserio.Unmarshaler interface.
func (v *{{ $.enum.Name }}) UnmarshalZserio(r *bitio.Reader) error {
    {{- if not $enum.Type.IsBuiltin }}
      panic("only builtin types supported")
    {{- else if eq $enum.Type.Bits 0 }}
      var err error
      *v, err = ztype.Read{{ title $enum.Type.Name }}(r)
      return err
    {{- else }}
      {{- if eq $enum.Type.Name "int" }}
        if value, err := ztype.ReadSignedBits(r, {{ $enum.Type.Bits }}); err != nil {
      {{- else }}
        if value, err := ztype.ReadUnsignedBits(r, {{ $enum.Type.Bits }}); err != nil {
      {{- end }}
          return err
        } else {
          *v = {{ $enum.Name }}(value)
        }
        return nil
    {{- end }}
}
