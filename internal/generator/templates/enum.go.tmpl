{{ template "preamble.go.tmpl" dict "rootPackage" .rootPackage "pkg" .pkg }}
{{ $scope := .pkg }} 
{{ $enum := .enum }}
{{ $native := goNativeType $scope $enum.Type }}

{{ $enum.Comment }}
type {{ $enum.Name }} {{ goType $scope $enum.Type }}
const (
{{- range $item := $enum.Items }}
    {{- if $item.Comment}}
        {{ $item.Comment }}
    {{- end}}
    {{ $enum.Name }}{{ $item.Name }} {{ $enum.Name }} = {{ if eq $item.ResultType "int" }}{{ .ResultIntValue }}
    {{- else if eq $item.ResultType "string" }}{{ .ResultStringValue }}
    {{- else }}UNSUPPORTED
    {{- end }}
{{- end }}
)

func (v *{{ $enum.Name}}) LoadDefaultValues() error {
  return nil
}

// MarshalZserio implements the zserio.Marshaler interface.
func (v *{{ $enum.Name}}) MarshalZserio(w *bitio.CountWriter) error {
    {{- if not $native.Type.IsBuiltin }}
      panic("only builtin types supported")
    {{- else if eq $native.Type.Bits 0 }}
      return ztype.Write{{ title $native.Type.Name }}(w, {{ goType $scope $native.Type }}(*v))
    {{- else if eq $native.Type.Name "bit" }}
      return ztype.WriteUnsignedBits(w, uint64(*v), {{ $native.Type.Bits }})
    {{- else if eq $native.Type.Name "int" }}
      return ztype.WriteSignedBits(w, int64(*v), {{ $native.Type.Bits }})
    {{- else }}
      panic("unsupported type")
    {{- end }}
}

// UnmarshalZserio implements the zserio.Unmarshaler interface.
func (v *{{ $enum.Name }}) UnmarshalZserio(r *bitio.CountReader) error {
    {{- if not $native.Type.IsBuiltin }}
      panic("only builtin types supported")
    {{- else }}
      {{- if eq $native.Type.Bits 0 }}
        if value, err := ztype.Read{{ title $native.Type.Name }}(r); err != nil {
      {{- else if eq $native.Type.Name "int" }}
        if value, err := ztype.ReadSignedBits(r, {{ $native.Type.Bits }}); err != nil {
      {{- else }}
        if value, err := ztype.ReadUnsignedBits(r, {{ $native.Type.Bits }}); err != nil {
      {{- end }}
          return err
        } else {
          *v = {{ $enum.Name }}(value)
        }
        return nil
    {{- end }}
}

// ZserioBitSize implements the zserio.Marshaler interface.
func (v *{{ $enum.Name}}) ZserioBitSize(bitPosition int) (int, error) {
  endBitPosition := bitPosition
{{- if not $native.Type.IsBuiltin }}
      panic("only builtin types supported")
{{- else }}
  {{ template "builtin_bitsizeof.go.tmpl" dict "pkg" $scope "name" "*v" "native" $native "isarray" false }}
{{- end }}
  return endBitPosition - bitPosition, nil
}

func (v *{{ $enum.Name}}) ZserioCreatePackingContext(contextNode *zserio.PackingContextNode) error {
  contextNode.Context = &ztype.DeltaContext[{{ goType $scope $native.Type }}]{}
  return nil
}


func (v *{{ $enum.Name}}) ZserioInitPackingContext(contextNode *zserio.PackingContextNode) error {
  if !contextNode.HasContext() {
    return errors.New("context node has no packing")
  }
  context, ok := contextNode.Context.(*ztype.DeltaContext[{{ goType $scope $native.Type }}])
  if !ok {
    return errors.New("unsupported packing context type")
  }
  context.Init(&{{- template "instantiate_array_traits.go.tmpl" dict "pkg" $scope "native" $native }}, {{ goType $scope $native.Type }}(*v))
  return nil
}


func (v *{{ $enum.Name}}) UnmarshalZserioPacked(contextNode *zserio.PackingContextNode, r *bitio.CountReader) error {
  context, ok := contextNode.Context.(*ztype.DeltaContext[{{ goType $scope $native.Type }}])
  if !ok {
    return errors.New("unsupported packing context type")
  }
  if tempValue, err := context.Read(&{{- template "instantiate_array_traits.go.tmpl" dict "pkg" $scope "native" $native }}, r); err != nil {
    return err
  } else {
    (*v) = {{ $enum.Name }}(tempValue)
    return nil
  }
}

func (v *{{ $enum.Name}}) MarshalZserioPacked(contextNode *zserio.PackingContextNode, w *bitio.CountWriter) error {
  context, ok := contextNode.Context.(*ztype.DeltaContext[{{ goType $scope $native.Type }}])
  if !ok {
    return errors.New("unsupported packing context type")
  }
  return context.Write(&{{- template "instantiate_array_traits.go.tmpl" dict "pkg" $scope "native" $native }}, w, {{ goType $scope $native.Type }}(*v))
}

func (v *{{ $enum.Name}}) ZserioInitializeOffsetsPacked(contextNode *zserio.PackingContextNode, bitPosition int) int {
  return 0
}

func (v *{{ $enum.Name}}) ZserioBitSizePacked(contextNode *zserio.PackingContextNode, bitPosition int) (int, error) {
  return 0, nil
}
