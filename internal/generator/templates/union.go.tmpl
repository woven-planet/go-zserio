{{ $scope := .pkg }}
{{ $union := .union }}

type {{ $union.Name }}UnionChoiceType uint64

const (
    // {{ $union.Name }}ChoiceUndefined is the value for the union if no value is set. 
    {{ $union.Name }}ChoiceUndefined {{ $union.Name }}UnionChoiceType = iota
{{- range $item := $union.Fields }}
    // {{ $union.Name }}Choice{{ $item.Name }} is the union value if the union 
    // is {{ $item.Name }}.
    {{ $union.Name }}Choice{{ $item.Name }}
{{- end }}
)

{{ $union.Comment }}
type {{ $union.Name }} struct {
UnionChoice {{ $union.Name }}UnionChoiceType
{{- range $param := $union.TypeParameters }}
  {{ .Name }} {{ goType $scope .Type }}
{{- end }}
{{- range $field := $union.Fields }}
  {{- template "field_declaration.go.tmpl" dict "pkg" $scope "field" $field }}
{{- end }}
}

func (v *{{ $union.Name}}) Clone() zserio.ZserioType {
  clone := &{{ $union.Name }}{}
  *clone = *v
  return clone
}

func (v *{{ $union.Name}}) LoadDefaultValues() error {
{{- range $field := $union.Fields }}
  {{template "default_values.go.tmpl" dict "pkg" $scope "field" $field }}
{{- end}}
  return nil
}

// MarshalZserio implements the zserio.Marshaler interface.
func (v *{{ $union.Name}}) MarshalZserio(w zserio.Writer) error {
  err := ztype.WriteVarsize(w, uint64(v.UnionChoice))
  if err != nil {
    return err
  }
{{- range $field := $union.Fields }}
  if v.UnionChoice == {{ $union.Name }}Choice{{ $field.Name }} {
{{template "encode.go.tmpl" dict "pkg" $scope "field" $field }}
  }
{{- end}}
    return nil
}

// UnmarshalZserio implements the zserio.Unmarshaler interface.
func (v *{{ $union.Name}}) UnmarshalZserio(r zserio.Reader) error {
    unionChoice, err := ztype.ReadVarsize(r)
    if err != nil {
       return err
    }
    v.UnionChoice = {{ $union.Name }}UnionChoiceType(unionChoice)

{{- range $field := $union.Fields }}
   if v.UnionChoice == {{ $union.Name }}Choice{{ $field.Name }} {
{{template "decode.go.tmpl" dict "pkg" $scope "field" $field }}
   }
{{- end}}
    return nil
}

{{template "functions.go.tmpl" dict "name" $union.Name "scope" $scope "functions" $union.Functions }}

// ZserioBitSize implements the zserio.Marshaler interface.
func (v *{{ $union.Name}}) ZserioBitSize(bitPosition int) (int, error) {
  endBitPosition := bitPosition
  if delta, err := ztype.UnsignedBitSize(uint64(v.UnionChoice), 5); err != nil {
    return 0, err
  } else {
    endBitPosition += delta
  }
{{- range $field := $union.Fields }}
  if v.UnionChoice == {{ $union.Name }}Choice{{ $field.Name }} {
    {{- template "bitsizeof.go.tmpl" dict "pkg" $scope "field" $field }}
  }
{{- end }}
  return endBitPosition - bitPosition, nil
}


func (v *{{ $union.Name}}) ZserioCreatePackingContext(contextNode *zserio.PackingContextNode) error {
{{- range $field := $union.Fields }}
  {{- template "packing_context_create.go.tmpl" dict "pkg" $scope "field" $field }}
{{- end}}
  return nil
}

func (v *{{ $union.Name}}) ZserioInitPackingContext(contextNode *zserio.PackingContextNode) error {
    childrenNodes := contextNode.GetChildren()
    _ = childrenNodes // to avoid "declared but not used" warning
{{- range $index, $field := $union.Fields }}
  {{- template "packing_context_init.go.tmpl" dict "pkg" $scope "field" $field "index" $index }}
{{- end}}
  return nil
}

func (v *{{ $union.Name}}) UnmarshalZserioPacked(contextNode *zserio.PackingContextNode, r zserio.Reader) error {
  return nil
}


func (v *{{ $union.Name}}) MarshalZserioPacked(contextNode *zserio.PackingContextNode, r zserio.Writer) error {
  return nil
}

func (v *{{ $union.Name}}) ZserioInitializeOffsetsPacked(contextNode *zserio.PackingContextNode, bitPosition int) int {
  return 0
}

func (v *{{ $union.Name}}) ZserioBitSizePacked(contextNode *zserio.PackingContextNode, bitPosition int) (int, error) {
  return 0, nil
}
