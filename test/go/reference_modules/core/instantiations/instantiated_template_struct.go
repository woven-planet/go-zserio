// Code generated by go-zserio. DO NOT EDIT.

package instantiations

import (
	"github.com/icza/bitio"
	zserio "github.com/woven-planet/go-zserio/interface"
	reference_modules_core_types "github.com/woven-planet/go-zserio/test/go/reference_modules/core/types"
)

type InstantiatedTemplateStruct struct {
	Parameter int32
	Field     reference_modules_core_types.ValueWrapper
}

func (v *InstantiatedTemplateStruct) Clone() zserio.ZserioType {
	clone := &InstantiatedTemplateStruct{}
	*clone = *v
	return clone
}

func (v *InstantiatedTemplateStruct) LoadDefaultValues() error {

	if err := v.Field.LoadDefaultValues(); err != nil {
		return err
	}
	return nil
}

// MarshalZserio implements the zserio.Marshaler interface.
func (v *InstantiatedTemplateStruct) MarshalZserio(w *bitio.CountWriter) error {
	var err error

	v.Field.Parameter = int32(v.Parameter)
	if err = v.Field.MarshalZserio(w); err != nil {
		return err
	}
	_ = err // to avoid "declared but not used" warning
	return nil
}

// UnmarshalZserio implements the zserio.Unmarshaler interface.
func (v *InstantiatedTemplateStruct) UnmarshalZserio(r *bitio.CountReader) error {
	var err error

	v.Field.Parameter = int32(v.Parameter)
	if err = v.Field.UnmarshalZserio(r); err != nil {
		return err
	}
	_ = err // to avoid "declared but not used" warning
	return nil
}

func (v *InstantiatedTemplateStruct) GetValue() int32 {
	retVal := v.Field.GetValue() >> 1
	if v.Parameter > 10 {
		retVal = v.Field.GetValue() << 1
	}

	return int32(retVal)
}

// ZserioBitSize implements the zserio.Marshaler interface.
func (v *InstantiatedTemplateStruct) ZserioBitSize(bitPosition int) (int, error) {
	endBitPosition := bitPosition

	if delta, err := v.Field.ZserioBitSize(endBitPosition); err != nil {
		return 0, err
	} else {
		endBitPosition += delta
	}
	return endBitPosition - bitPosition, nil
}

func (v *InstantiatedTemplateStruct) ZserioCreatePackingContext(contextNode *zserio.PackingContextNode) error {

	fieldFieldNode := &zserio.PackingContextNode{}
	contextNode.AddChild(fieldFieldNode)
	var fieldFieldPtr *reference_modules_core_types.ValueWrapper
	if err := fieldFieldPtr.ZserioCreatePackingContext(fieldFieldNode); err != nil {
		return err
	}

	return nil
}

func (v *InstantiatedTemplateStruct) ZserioInitPackingContext(contextNode *zserio.PackingContextNode) error {
	childrenNodes := contextNode.GetChildren()
	_ = childrenNodes // to avoid "declared but not used" warning

	v.Field.Parameter = int32(v.Parameter)
	if err := v.Field.ZserioInitPackingContext(childrenNodes[0]); err != nil {
		return err
	}

	return nil
}

func (v *InstantiatedTemplateStruct) UnmarshalZserioPacked(contextNode *zserio.PackingContextNode, r *bitio.CountReader) error {
	var err error
	childrenNodes := contextNode.GetChildren()
	_ = childrenNodes // to avoid "declared but not used" warning

	v.Field.Parameter = int32(v.Parameter)
	if err = v.Field.UnmarshalZserioPacked(childrenNodes[0], r); err != nil {
		return err
	}
	_ = err // to avoid "declared but not used" warning
	return nil
}

func (v *InstantiatedTemplateStruct) MarshalZserioPacked(contextNode *zserio.PackingContextNode, w *bitio.CountWriter) error {
	var err error
	childrenNodes := contextNode.GetChildren()
	_ = childrenNodes // to avoid "declared but not used" warning

	v.Field.Parameter = int32(v.Parameter)
	if err := v.Field.MarshalZserioPacked(childrenNodes[0], w); err != nil {
		return err
	}
	_ = err // to avoid "declared but not used" warning
	return nil
}

func (v *InstantiatedTemplateStruct) ZserioInitializeOffsetsPacked(contextNode *zserio.PackingContextNode, bitPosition int) int {
	return 0
}

func (v *InstantiatedTemplateStruct) ZserioBitSizePacked(contextNode *zserio.PackingContextNode, bitPosition int) (int, error) {
	endBitPosition := bitPosition
	childrenNodes := contextNode.GetChildren()
	_ = childrenNodes // to avoid "declared but not used" warning

	if delta, err := v.Field.ZserioBitSizePacked(childrenNodes[0], endBitPosition); err != nil {
		return 0, err
	} else {
		endBitPosition += delta
	}
	return endBitPosition - bitPosition, nil
}
