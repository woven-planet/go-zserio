// Code generated by go-zserio. DO NOT EDIT.

package types

import (
	"errors"
	"github.com/icza/bitio"
	zserio "github.com/woven-planet/go-zserio/interface"
	"github.com/woven-planet/go-zserio/ztype"
)

type Color uint8

const (
	ColorNONE  Color = 0
	ColorRED   Color = 2
	ColorBLUE  Color = 3
	ColorBLACK Color = 7
)

func (v *Color) Clone() zserio.ZserioType {
	clone := *v
	return &clone
}

func (v *Color) LoadDefaultValues() error {
	return nil
}

// MarshalZserio implements the zserio.Marshaler interface.
func (v *Color) MarshalZserio(w *bitio.CountWriter) error {
	return ztype.WriteUnsignedBits(w, uint64(*v), 3)
}

// UnmarshalZserio implements the zserio.Unmarshaler interface.
func (v *Color) UnmarshalZserio(r *bitio.CountReader) error {
	if value, err := ztype.ReadUnsignedBits(r, 3); err != nil {
		return err
	} else {
		*v = Color(value)
	}
	return nil
}

// ZserioBitSize implements the zserio.Marshaler interface.
func (v *Color) ZserioBitSize(bitPosition int) (int, error) {
	endBitPosition := bitPosition

	endBitPosition += 3
	return endBitPosition - bitPosition, nil
}

func (v *Color) ZserioCreatePackingContext(contextNode *zserio.PackingContextNode) error {
	contextNode.Context = &ztype.DeltaContext[uint8]{}
	return nil
}

func (v *Color) ZserioInitPackingContext(contextNode *zserio.PackingContextNode) error {
	if !contextNode.HasContext() {
		return errors.New("context node has no packing")
	}
	context, ok := contextNode.Context.(*ztype.DeltaContext[uint8])
	if !ok {
		return errors.New("unsupported packing context type")
	}
	context.Init(&ztype.BitFieldArrayTraits[uint8]{NumBits: uint8(3)}, uint8(*v))
	return nil
}

func (v *Color) UnmarshalZserioPacked(contextNode *zserio.PackingContextNode, r *bitio.CountReader) error {
	context, ok := contextNode.Context.(*ztype.DeltaContext[uint8])
	if !ok {
		return errors.New("unsupported packing context type")
	}
	if tempValue, err := context.Read(&ztype.BitFieldArrayTraits[uint8]{NumBits: uint8(3)}, r); err != nil {
		return err
	} else {
		(*v) = Color(tempValue)
		return nil
	}
}

func (v *Color) MarshalZserioPacked(contextNode *zserio.PackingContextNode, w *bitio.CountWriter) error {
	context, ok := contextNode.Context.(*ztype.DeltaContext[uint8])
	if !ok {
		return errors.New("unsupported packing context type")
	}
	return context.Write(&ztype.BitFieldArrayTraits[uint8]{NumBits: uint8(3)}, w, uint8(*v))
}

func (v *Color) ZserioInitializeOffsetsPacked(contextNode *zserio.PackingContextNode, bitPosition int) int {
	return 0
}

func (v *Color) ZserioBitSizePacked(contextNode *zserio.PackingContextNode, bitPosition int) (int, error) {
	return 0, nil
}
