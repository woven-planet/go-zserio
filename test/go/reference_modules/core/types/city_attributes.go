// Code generated by go-zserio. DO NOT EDIT.

package types

import (
	"errors"
	"github.com/icza/bitio"
	zserio "github.com/woven-planet/go-zserio/interface"
	"github.com/woven-planet/go-zserio/ztype"
)

type CityAttributes uint32

const (
	CityAttributesHAS_TOWNHALL          CityAttributes = 1
	CityAttributesHAS_RAILWAY_STATION   CityAttributes = 2
	CityAttributesHAS_UNIVERSITY        CityAttributes = 4
	CityAttributesHAS_HOKKIEN_MEE_STORE CityAttributes = 256
	CityAttributesHAS_SUBWAY            CityAttributes = 512
	CityAttributesHAS_HIGHSCHOOL        CityAttributes = 1024
)

func (v *CityAttributes) Clone() zserio.ZserioType {
	clone := *v
	return &clone
}

func (v *CityAttributes) LoadDefaultValues() error {
	return nil
}

// MarshalZserio implements the zserio.Marshaler interface.
func (v *CityAttributes) MarshalZserio(w *bitio.CountWriter) error {
	return ztype.WriteUint32(w, uint32(*v))
}

// UnmarshalZserio implements the zserio.Unmarshaler interface.
func (v *CityAttributes) UnmarshalZserio(r *bitio.CountReader) error {
	if value, err := ztype.ReadUint32(r); err != nil {
		return err
	} else {
		*v = CityAttributes(value)
	}
	return nil
}

// ZserioBitSize implements the zserio.Marshaler interface.
func (v *CityAttributes) ZserioBitSize(bitPosition int) (int, error) {
	endBitPosition := bitPosition
	endBitPosition += 32
	return endBitPosition - bitPosition, nil
}

func (v *CityAttributes) ZserioCreatePackingContext(contextNode *zserio.PackingContextNode) error {
	contextNode.Context = &ztype.DeltaContext[uint32]{}
	return nil
}

func (v *CityAttributes) ZserioInitPackingContext(contextNode *zserio.PackingContextNode) error {
	return nil
}

func (v *CityAttributes) UnmarshalZserioPacked(contextNode *zserio.PackingContextNode, r *bitio.CountReader) error {
	context, ok := contextNode.Context.(*ztype.DeltaContext[uint32])
	if !ok {
		return errors.New("unsupported packing context type")
	}
	if tempValue, err := context.Read(&ztype.BitFieldArrayTraits[uint32]{NumBits: uint8(32)}, r); err != nil {
		return err
	} else {
		(*v) = CityAttributes(tempValue)
		return nil
	}
}

func (v *CityAttributes) MarshalZserioPacked(contextNode *zserio.PackingContextNode, w *bitio.CountWriter) error {
	context, ok := contextNode.Context.(*ztype.DeltaContext[uint32])
	if !ok {
		return errors.New("unsupported packing context type")
	}
	return context.Write(&ztype.BitFieldArrayTraits[uint32]{NumBits: uint8(32)}, w, uint32(*v))
}

func (v *CityAttributes) ZserioInitializeOffsetsPacked(contextNode *zserio.PackingContextNode, bitPosition int) int {
	return 0
}

func (v *CityAttributes) ZserioBitSizePacked(contextNode *zserio.PackingContextNode, bitPosition int) (int, error) {
	return 0, nil
}
